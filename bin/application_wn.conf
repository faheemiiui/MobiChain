akka {
//loglevel = "DEBUG"
extensions =
["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
     provider = "akka.remote.RemoteActorRefProvider"
     
     serializers {
	    #java = "akka.serialization.JavaSerializer"
	    # Define kryo serializer
	    kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
	}
	
	serialization-bindings {
		    "java.util.List" = kryo
		    "java.io.Serializable" = kryo
		    "java.util.Map" = kryo
		    "java.util.concurrent.ConcurrentHashMap" = kryo
		    "java.util.Date" = kryo
		    "akka.actor.RepointableActorRef"=kryo
		    "akka.remote.RemoteActorRef"=kryo
		    "akka.actor.ChildActorPath"=kryo
		    "akka.actor.RootActorPath"=kryo
		    "akka.actor.Address"=kryo
		    "scala.None$"=kryo
		    "akka.actor.Props"=kryo
		    "scala.collection.immutable.$colon$colon"=kryo
		    "java.lang.Class"=kryo
		    "com.ciit.ps.wn.Prover"=kryo
		    "com.ciit.ps.wn.Witness"=kryo
			"com.ciit.ps.wn.LocationAuthority"=kryo
			"com.ciit.lp.messages.ALPACK"=kryo
			"java.util.ArrayList"=kryo
			"com.ciit.lp.messages.ALPACK"=kryo
			"com.ciit.lp.messages.ALPVerificationResMsg"=kryo
			"com.ciit.lp.messages.ALPVerificationReqMsg"=kryo
			
		    } 
     
    kryo  {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small
      # overhead nograph does not support object grpahs with shared nodes,
      # but is usually faster
      type = "graph"

      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation.
      # Contains fully-qualified class names (FQCNs) for each class. Note
      # that selecting this strategy does not work in version 0.3.2, but
      # is available from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation.
      # Requires that all classes that will be serialized are pre-registered
      # using the "mappings" and "classes" sections. To guarantee that both
      # sender and receiver use the same numeric ids for the same classes it
      # is advised to provide exactly the same entries in the "mappings"
      # section.
      #
      # incremental - fast and produces compact serialized representation.
      # Support optional pre-registering of classes using the "mappings"
      # and "classes" sections. If class is not pre-registered, it will be
      # registered dynamically by picking a next available id To guarantee
      # that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section.
      #
      # automatic -  use the pre-registered classes with fallback to FQCNs
      # Contains fully-qualified class names (FQCNs) for each non pre-registered
      # class in the "mappings" and "classes" sections. This strategy was
      # added in version 0.4.1 and will not work with the previous versions

      idstrategy = "explicit"
	   

      # Define a default queue builder, by default ConcurrentLinkedQueue is used.
      # Create your own queue builder by implementing the trait QueueBuilder,
      # useful for paranoid GC users that want to use JCtools MpmcArrayQueue for example.
      #
      # If you pass a bounded queue make sure its capacity is equal or greater than the
      # maximum concurrent remote dispatcher threads your application will ever have
      # running; failing to do this will have a negative performance impact:
      #
      # custom-queue-builder = "a.b.c.KryoQueueBuilder"

      # Define a default size for byte buffers used during serialization
      buffer-size = 1048576

      # The serialization byte buffers are doubled as needed until they
      # exceed max-buffer-size and an exception is thrown. Can be -1
      # for no maximum.
      max-buffer-size = -1

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # If set it will use the UnsafeInput and UnsafeOutput
      # Kyro IO instances. Please note that there is no guarantee
      # for backward/forward compatibility of unsafe serialization.
      # It is also not compatible with the safe-serialized values.
      # The unsafe IO usually creates bugger payloads but is faster
      # for some types, e.g. native arrays.
      use-unsafe = false

      # The transformations that have be done while serialization
      # Supported transformations: compression and encryption
      # accepted values(comma separated if multiple): off | lz4 | deflate | aes
      # Transformations occur in the order they are specified
      post-serialization-transformations = "lz4,aes"

      # Settings for aes encryption, if included in transformations AES
      # algo mode, key and custom key class can be specified AES algo mode
      # defaults to 'AES/CBC/PKCS5Padding' and key to 'ThisIsASecretKey'.
      # If custom key class is provided, Kryo will use the class specified
      # by a fully qualified class name to get custom AES key. Such a
      # class should define the method 'kryoAESKey'. This key overrides 'key'.
      # If class doesn't contain 'kryoAESKey' method, specified key is used.
      # If this is not present, default key is used
      encryption {
          aes {
              mode = "AES/CBC/PKCS5Padding"
              key = j68KkRjq21ykRGAQ
              IV-length = 16
              custom-key-class = "CustomAESKeyClass"
          }
      }

      # Log implicitly registered classes. Useful, if you want to know all
      # classes which are serialized. You can then use this information in
      # the mappings and/or classes sections
      implicit-registration-logging = false

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      kryo-trace = false

      # If proviced, Kryo uses the class specified by a fully qualified
      # class name to perform a custom initialization of Kryo instances in
      # addition to what is done automatically based on the config file.
      #kryo-custom-serializer-init = "CustomKryoSerializerInitFQCN"

      # If enabled, allows Kryo to resolve subclasses of registered Types.
      #
      # This is primarily useful when idstrategy is set to "explicit". In this
      # case, all classes to be serialized must be explicitly registered. The
      # problem is that a large number of common Scala and Akka types (such as
      # Map and ActorRef) are actually traits that mask a large number of
      # specialized classes that deal with various situations and optimizations.
      # It isn't straightforward to register all of these, so you can instead
      # register a single supertype, with a serializer that can handle *all* of
      # the subclasses, and the subclasses get serialized with that.
      #
      # Use this with care: you should only rely on this when you are confident
      # that the superclass serializer covers all of the special cases properly.
      resolve-subclasses = false

      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is:
      # - mandatory for idstrategy="explicit"
      # - ignored   for idstrategy="default"
      # - optional  for incremental and automatic
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types
      mappings {
         # "package1.name1.className1" = 20,
         # "package2.name2.className2" = 21
         "com.ciit.lp.messages.SNConnectMsg"=20
		 "com.ciit.lp.messages.ApprovalMessage"=21
		"com.ciit.lp.messages.ApprovalPendingRRSN"=22
		"com.ciit.lp.messages.AssertionResponse"=23
		"com.ciit.lp.messages.ChosenWorkersMsg"=24
		"com.ciit.lp.messages.LAConnectAck"=25
		"com.ciit.lp.messages.LAConnectMsg"=26
		"com.ciit.lp.messages.LocationProofReq"=27
		"com.ciit.lp.messages.LPAssertionReq"=28
		"com.ciit.lp.messages.NewLAEntryMsg"=29
		"com.ciit.lp.messages.NewWitnessEntryMsg"=30
		"com.ciit.lp.messages.ProofRequestMsg"=31
		"com.ciit.lp.messages.SNConnectAck"=32
		"com.ciit.lp.messages.SNConnectMsg"=33
		"com.ciit.lp.messages.WitnessSelectionReqMsg"=34
		"com.ciit.lp.messages.WNConnectAck"=35
		"com.ciit.lp.messages.WNConnectMsg"=36
		"com.ciit.lp.messages.ConnectedWorkerMsg"=37
		"java.util.concurrent.ConcurrentHashMap"=38
		"com.ciit.lp.entities.AssertedLocationProof"=39
		"com.ciit.lp.entities.AssertionStatment"=40
		"com.ciit.lp.entities.DecisionBlock"=41
		"com.ciit.lp.entities.LocationAuthorityDetails"=42
		"com.ciit.lp.entities.LocationProof"=43
		"com.ciit.lp.entities.ProverDetails"=44
		"com.ciit.lp.entities.WitnessDetails"=45
		"com.ciit.lp.entities.WorkerNode"=46
		"java.util.Date"=47
		"akka.actor.RepointableActorRef"=48
		"akka.remote.RemoteActorRef"=49
		"akka.actor.ChildActorPath"=50
		"akka.actor.RootActorPath"=51
		"akka.actor.Address"=52
		"scala.None$"=53
		"akka.actor.Props"=54
		"scala.collection.immutable.$colon$colon"=55
		"java.lang.Class"=56
		"com.ciit.ps.wn.Prover"=57
		"com.ciit.ps.wn.Witness"=58
		"com.ciit.ps.wn.LocationAuthority"=59
		"java.util.ArrayList"=60
		"com.ciit.lp.messages.NoLAColocatedMsg"=61
		"com.ciit.lp.messages.NoWitnessColocatedMsg"=62
		"com.ciit.lp.messages.ALPACK"=63
		"com.ciit.lp.messages.ALPVerificationResMsg"=64
		"com.ciit.lp.messages.ALPVerificationReqMsg"=65
      }

      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is ignored for idstrategy="default" and optional for
      # all other.
      classes = [
         #"com.ciit.lp.messages",
         #"com.lightbend.akka.sample.ConnectMsg"
      ]
  	}
  }
  remote {
  
  //log-sent-messages = on
     //log-received-messages = on
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 3555
    }
 }
}